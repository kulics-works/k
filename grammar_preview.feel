## Grammar Overview

## Export Name Space
mod demo;

## Import Name Space
use {
    System;
    System.Text;
    System.Threading.Tasks;
    System.ComponentModel.DataAnnotations.Schema;
    System.ComponentModel.DataAnnotations;
    . = IO.File; ## 可以隐藏元素使用内容
}

let main() = {
    ## Define, 一般情况下编译器会自动判断类型
    let string: String = "10";
    let number: Float = 1.2;
    let integer: Int = 123;
    let boolean: Bool = true;
    let smallFloat = (1.2).toFloat32(); ## basic obj convert

    ## Const
    let pi = 3.141592653;

    ## Mark String
    let format = "the value is \{integer}, \{number}, \{boolean}";

    ## Array
    let array: [Int] = arrayOf(1, 2, 3);
    let array2: [Int] = [1, 2, 3];

    ## List
    let list: (Int)List = [1, 2, 3, 4, 5];
    print( list[0] ); ## 使用下标获取

    ## Map, 前面为 key，后面为 value
    let map: (String, Bool)Map = [("1", false), ("2", true)];
    print( map["1"] ); ## 使用key获取

    ## Function
    let f(a: Int): Int = a;

    ## Function with no params no return
    let do_something_void(): Void = {
        do_something_a();
        do_something_b();
    }

    ## Full Function with params and return
    let do_something_with_params(x: Int, y: String): (a: Int, b: String) = (x, y);

    ## Function type
    let f: (Int, Int)->Int = (x: Int, y: Int): Int => x + y;
    let f: (Int, Int)->Int = (x, y) => x + y;
    let f(x: Int, y: Int): Int = x + y;
    let f(x: Int, y: Int) = x + y;
    let g(): Void = {}
    let g: ()->Void = () => {}

    ## Currying
    let add = (x: Int) => (y: Int) => x + y;
    let add: (Int)->(Int)->Int = (x) => (y) => x + y;
    let add: Int->Int->Int = x => y => x + y;
    let add(x: Int) = (y: Int) => x + y;
    let v = add(1)(2);

    ## Lambda Function
    listOf(1, 2, 3, 4).filter(x => x % 2 == 0).map(x => x * x).sum();

    ## Func params
    let f(i: Int->Int) = i(1);
    f((x: Int): Int => x);
    f(x => x);

    do_something_void();
    ## use _ discard return value
    _ = do_something_with_params(3, "test");

    ## if-do, single branch structure
    if a < b do {
        ...
    }

    ## if-let, if with init 
    if let a = 1; a < 0 do {
        ...
    }

    ## if-then-else, double branch structure
    let v = if true then 0 else 0;
    if true then {
        ...
    } else {
        ...
    }

    if a then ...
    else if b then ...
    else ...;

    let op: (Int)Option = Some(1);
    if op as Some(v) do {
        printLine(v)
    }

    ## while-do, single branch structure
    while a < b do {
        ...
    }

    ## while-let, while with init 
    while let mut i = 0; i < 10 do {
        i += 1
    }

    ## while-then-else, double branch structure, break can with value
    let v = while true then break 1 else 2;
    while true then {
        ...
    } else {
        ...
    }

    let iter: (Int)Iterator = listOf(1,2,3).iterator();
    while iter.next() as Some(v) do {
        printLine(v)
    }

    ## when
    when {
        a < b then "a";
        b < c then {
            ...
            fallthrough
        }
        c < d then "c";
        else "d";
    }

    when x as {
        1 then "a";
        2 then "b";
        3 then "c";
        _ then "d";
    }

    ## when-let
    when let x = makeInt(); x as {
        1 then "a";
        2 then "b";
        3 then "c";
        _ then "d";
    }

    ## for
    for array as item do {
        ...
    }

    ## for-let
    for let arr = makeArray(); arr as item do {
        ...
    }

    for array as {
        1 then "a";
        2 then "b";
        3 then "c";
        _ then "d";
    }

    ## Loop, use identify to take out single item
    for array as item do printLine(item);
    
    ## take index and value, both worked at Dictionary
    for array.withIndex() as (index, value) do {
        printLine((index, value));
    }
    
    for 0..10 as i do {
        printLine(i);
    }
    
    if foo() as A(x) and bar(x) as B(y) then {
        do_stuff_with(x, y)
    } else {
        some_long_expression
    }
    ## equals to
    if foo() as A(x) then {
        if bar(x) as B(y) then {
            do_stuff_with(x, y)
        } else {
            some_long_expression
        }
    } else {
        some_long_expression
    }

    let nb = 42;
    when nb as {
        >= 0 & <= 7 | 8 | 9 then print("single digit");
        10 then print("double digits");
        >= 11 & <= 99 then print("double digits");
        >= 100 & <= 999 then print("triple digits");
        _ then print("four or more digits");
    }
    if nb as >= 0 & <= 7 | 8 | 9 or nb == 10 do print("simple digit");

    ## data type define
    type Button(width: Int, height: Int, background: String, title: String);
    given Button with {
        this.click(): Void = {
            printLine(title);
            doSomeThingA();
            doSomeThingB();
        }
    }
    ## privite members
    type Image(_width: Int, _height: Int, _source: String);

    ## abstract type define
    type Animation = {
        this.move(s: Int): Void;
        this.stop(): Void;
    }

    ## Combine Template
    type ImageButton(as image: Image, as button: Button);
    given ImageButton: Animation with {
        ## Implement Interface
        this.move(s: Int): Void = {
            let t = 5000/s;
            play( s + t );
        }
        this.stop(): Void = {}
    }

    ## Create an Template object
    let btn = Button(1, 2, "Cancel");
    let img = Image(1, 2, "?.jpg");
    let mut ib: ImageButton = Image(img, btn);
    ib = (img, btn);
    ## Calling property
    ib.title = "OK";
    ## Calling method
    ib.show();
    ## Calling protocol
    ib.move(6);

    ## Use Interface
    let play_animation(a: Animation) = {
        a.move(1000);
        a.stop();
    }
    play_animation(ib);

    ## Annotation
    [table("user"), property(false, name = "d", hide = true)]
    type mut User(
        [column("id"), required, key]
        id: String,
        [column("nick_name"), required]
        nick_name: String,
        [column("time_update"), required]
        time_update: Int,
    );
    
    ## Generic Type
    type mut (T)Table(data: T);
    given(T)->> (T)Table with {
        mut this.setData(d: T): Void = {
            this.data = d;
        }
    }
    (Int)Table(1);

    ## Generic function
    let (T)add(x1: T, x2: T): T where T: Addable = x1 + x2;
    (Int)add(1, 2);

    type Void();

    type Color = { Red(); Green(); Blue() }

    type Point(x: Int, y: Int);

    type (T1, T2)Pair(first: T1, second: T2);

    type (T)Option = { Some(value: T); None() }

    let opt() = {
        let mut a: (Int)Option = Some(1);
        a = None();
        when a as {
            Some(v) then printLine(v);
            None then printLine("none");
        }

        let b: ((Int)Option)Option = ((Int)Option)Some((Int)Some(2));
        when b as {
            Some(Some(v)) then printLine(v);
            Some(None) then printLine("some(none)");
            None then printLine("none");
        }
    }

    type mut (T)MyList(arr: [T]);
    ## operator override
    given(T)->> (T)MyList: (T)Addable with {
        ## a + e
        mut this.plus(element: T): Void = {
            this.arr = this.arr.append(element);
        }
    }
    given(T)->> (T)MyList: (T)MutIndexable with {
        ## e = a[i]
        this.get(index: Int): T = this.arr[index];
        ## a[i] = e
        mut this.set(index: Int, element: T): Void = this.arr[index] = element;
    }
    
    ## Iterator pattern
    type mut (T)Iterator = {
        mut this.next(): (T)Option;
    }

    type (T)Iterable = {
        this.iter(): mut (T)Iterator;
    }

    type (T)ListNode = {
        Empty();
        Node(head: T, tail: (T)ListNode);
    } with {
        this.iter(): mut (T)Iterator = mut ListNodeIterator(this);
    }

    type mut (T)ListIterator(li: (T)ListNode);

    given(T)->> (T)ListIterator with
        mut this.next(): (T)Option =
            if this.li as Node(h, t) then {
                this.li = t;
                Some(h)
            } else {
                None()
            }

    type TreeNode = { Empty(); Node(val: Int, left: TreeNode, right: TreeNode) }

    type Nat = { Zero(); Suc(n: Nat) }
}

type Foo(value: Int);

type Color = { Red(); Green(); Blue() }

type Color(rgb: String) = {
    Red("ff0000");
    Green("00ff00");
    Blue("0000ff");
}

type Planet(mass: Float, radius: Float) = {
    Mercury(3.303e+23, 2.4397e6);
    Venus(4.869e+24, 6.0518e6);
    Earth(5.976e+24, 6.37814e6);
    Mars(6.421e+23, 3.3972e6);
    Jupiter(1.9e+27, 7.1492e7);
    Saturn(5.688e+26, 6.0268e7);
    Uranus(8.686e+25, 2.5559e7);
    Neptune(1.024e+26, 2.4746e7);
}

type (T)Option = { Some(value: T); None() }

type (T)Expr = {
    IntExpr(value: Int): (Int)Expr;
    BoolExpr(value: Bool): (Bool)Expr;
    EqualExpr(left: (T)Expr, right: (T)Expr): (Bool)Expr;
    AddExpr(left: (Int)Expr, right: (Int)Expr): (Int)Expr;
}

type UserName(name: String);
type Password(hash: Hash);
type Identify = UserName | Password;
type (T)HashKey = (T)Equatable & Hashable;

given(T)->> (T)Option where T: ToString with {
    this.toString(): String = 
        if this is Some(v)
            then "Some(\{v})" 
            else "None()";
}

given Foo: ToString with {
    this.toString(): String = "foo";
}
given(T, R)->> (T)->R with {
    this.toAny(): Any = this;
}

type (T)LinkedList = {
    Cons(head: T, tail: (T)LinkedList);
    Empty();
}

given(T)->> (T)LinkedList with {
    new(): This = Empty();
}

type mut (T)List = {
    this.get(index: Int): T;

    mut this.set(index: Int, element: T): Void;
}

type mut (T)ArrayList = { ArrayList(_arr: (T)Array, size: Int) }
type mut (T)ArrayList(_arr: (T)Array, size: Int);

given(T)->> (T)ArrayList: (T)List with {
    new(): mut This = mut This([], 0);

    this.get(index: Int): T = this._arr.get(index);

    mut this.set(index: Int, element: T): Void = this._arr.set(index, element);

    this.(R)map(f: (T)->R): (R)Iterator = (T, R)MapIter(this, f);
}

given (Int)ArrayList with {
    this.sum(): Int = reduce(this.iterator(), 0, (l, r) => l + r);
}

type ToString = {
    this.toString(): String;
}

given Int: ToString with {
    this.toString(): String = cprintf(this);
}

given(T)->> (T)ArrayList: ToString where T: ToString with {
    this.toString(): String = join_String(this.iterator());
}

given Int with {
    default(): This = 0;
}

given String with {
    default(): This = "";
}

given(T)->> (T)Array with {
    default(): This = (T)arrayOf();
}

type Any = {}

given(T)->> T: Any with {}

type (T)Iterator = {
    mut this.next(): (T)Option
}

given(T)->> (T)Iterator with {
    mut this.(R)reduce(mut r: R, f: (R, T)-> R) = {
        while this.next() as Some(v) do {
            r = f(r, v)
        }
        r
    }
}

type mut InputStream = {
    mut this.read(to: (Byte)Array): Int;
}

type mut OutputStream = {
    mut this.write(from: mut (Byte)Array): Int;
    mut this.flush(): Void;
}

type mut (T)Array(_source: (T)RawArray, _start: Int, _len: Int) with {
    create(size: Int, item: T) = mut (T)Array(RawArray.new(size, item), 0, size);

    this.size() = this._len;

    this.get(index: Int) = this._source[index + _start];
    
    mut this.set(index: Int, value: T) = this._source[index + _start] = value;
    
    this.slice(start: Int, len: Int): (T)Array = 
        (T)Array(this._source, start, len);

    mut this.sliceMut(start: Int, len: Int): mut (T)Array = 
        mut (T)Array(this._source, start, len);
}

type mut (T)ArrayIterator(_source: (T)Array, index: Int): (T)Iterator with {
    of(source: (T)Array) = ArrayIterator(source, -1);
    
    mut this.next(): (T)Option = 
        if this.index < this._source.size() then {
            this.index += 1;
            Some(this._source[this.index])
        } else {
            None()
        }
}

type String(_data: (Char)Array) with {
    of(data: (Char)Array): String = String(data.clone());

    this.toString(): String = String(this._data.clone());

    this.clone(): String = String(this._data.clone());

    this.iter(): mut StringIterator = StringIterator.of(this);
}

type mut StringIterator(_source: String, index: Int): (Char)Iterator with {
    of(source: String) = mut StringIterator(source, -1);
    
    mut this.next(): (Char)Option = 
        if this.index < this._source._data.size() then {
            this.index += 1;
            Some(this._source[this.index])
        } else {
            None()
        }
}

type mut (T)Node(value: T, next: ((T)Node)Option);

type mut (T)LinkedList(head: ((T)Node)Option, size: Int) with {
    mut this.prepend(v: T): Void = {
        let node = mut Node(v, None());
        if this.head as None then {
            this.head = node;
        } else {
            node.next = this.head;
            this.head = node;
        }
        this.size += 1;
    }
}

#*
1. 数据是事物本身既有的
1. 事物的行为是由事物的数据决定的
1. 事物的行为可以根据所在环境的不同而有差异
1. 分类是对事物的抽象，通常形成于事物出现之后。
1. 分类描述某些特征，以此区分不同的事物。

1. 使用实例成员函数重载操作符
1. 默认数字类型是平台相关类型
1. 没有空指针
1. 没有继承
1. 没有函数重载
1. 没有字面量重载
1. 没有集合字面量
1. 没有隐式转换
1. 泛型
1. 模式匹配
1. 变长参数
1. 没有构造函数
1. 类型上区分可变和不可变
*#
